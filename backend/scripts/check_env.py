
# ==============================================================================
# ARQUIVO 2: backend/scripts/check_env.py
# ==============================================================================
"""
Script para validar configura√ß√£o do ambiente
Execute: python scripts/check_env.py
"""

import os
from pathlib import Path
from dotenv import load_dotenv

def check_env_vars():
    """Verifica se vari√°veis essenciais est√£o configuradas"""
    
    # Carregar .env
    load_dotenv()
    
    print("\n" + "=" * 60)
    print("üîç VERIFICANDO CONFIGURA√á√ÉO DO AMBIENTE")
    print("=" * 60 + "\n")
    
    # Vari√°veis essenciais
    required_vars = {
        'DATABASE_URL': 'URL do banco de dados',
        'SECRET_KEY': 'Chave secreta para JWT',
        'ENVIRONMENT': 'Ambiente (development/production)',
    }
    
    optional_vars = {
        'SENDGRID_API_KEY': 'Chave do SendGrid (email)',
        'SENTRY_DSN': 'DSN do Sentry (monitoramento)',
        'CORS_ORIGINS': 'URLs permitidas (CORS)',
    }
    
    issues = []
    warnings = []
    
    # Verificar vari√°veis obrigat√≥rias
    print("üìã Vari√°veis Obrigat√≥rias:")
    for var, description in required_vars.items():
        value = os.getenv(var)
        if value:
            # Mascarar valores sens√≠veis
            if 'KEY' in var or 'SECRET' in var:
                display_value = value[:10] + "..." if len(value) > 10 else "***"
            else:
                display_value = value
            
            print(f"   ‚úÖ {var}: {display_value}")
            
            # Verifica√ß√µes espec√≠ficas
            if var == 'SECRET_KEY' and len(value) < 32:
                warnings.append(f"‚ö†Ô∏è  {var} muito curta (< 32 caracteres)")
            
        else:
            print(f"   ‚ùå {var}: N√ÉO CONFIGURADA")
            issues.append(f"{var}: {description}")
    
    # Verificar vari√°veis opcionais
    print("\nüìã Vari√°veis Opcionais:")
    for var, description in optional_vars.items():
        value = os.getenv(var)
        if value:
            if 'KEY' in var or 'DSN' in var:
                display_value = value[:10] + "..."
            else:
                display_value = value
            print(f"   ‚úÖ {var}: {display_value}")
        else:
            print(f"   ‚ö†Ô∏è  {var}: N√£o configurada ({description})")
    
    # Verificar ambiente
    print("\nüåç Ambiente:")
    env = os.getenv('ENVIRONMENT', 'development')
    debug = os.getenv('DEBUG', 'False')
    
    print(f"   Ambiente: {env}")
    print(f"   Debug: {debug}")
    
    if env == 'production':
        if debug == 'True':
            warnings.append("‚ö†Ô∏è  DEBUG=True em produ√ß√£o! Deve ser False")
        
        if 'sqlite' in os.getenv('DATABASE_URL', '').lower():
            warnings.append("‚ö†Ô∏è  SQLite em produ√ß√£o! Use PostgreSQL")
        
        if not os.getenv('SENTRY_DSN'):
            warnings.append("‚ö†Ô∏è  Sentry n√£o configurado em produ√ß√£o")
    
    # Verificar arquivos
    print("\nüìÅ Arquivos:")
    root_dir = Path.cwd()
    
    files_to_check = {
        '.env': 'Configura√ß√£o de ambiente',
        '.gitignore': 'Ignorar arquivos sens√≠veis',
        'requirements.txt': 'Depend√™ncias Python',
    }
    
    for file, description in files_to_check.items():
        file_path = root_dir / file
        if file_path.exists():
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} n√£o encontrado")
            issues.append(f"Criar arquivo: {file}")
    
    # Resultado final
    print("\n" + "=" * 60)
    if not issues and not warnings:
        print("‚úÖ TUDO CERTO! Ambiente configurado corretamente.")
    else:
        if issues:
            print("‚ùå PROBLEMAS ENCONTRADOS:")
            for issue in issues:
                print(f"   ‚Ä¢ {issue}")
        
        if warnings:
            print("\n‚ö†Ô∏è  AVISOS:")
            for warning in warnings:
                print(f"   ‚Ä¢ {warning}")
    
    print("=" * 60 + "\n")
    
    return len(issues) == 0

if __name__ == "__main__":
    success = check_env_vars()
    exit(0 if success else 1)